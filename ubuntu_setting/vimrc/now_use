" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set shiftwidth=4  "是告诉 vim 在缩进代码时的缩进量(shiftwidth)为 4
set tabstop=4  "告诉 vim 一个制表符(tabstop)的长度是 4
set expandtab    "编辑时将所有tab替换为空格
set smarttab   "按一次backspace就删除4个空格

set cindent    "cindent Vim可以很好的识别出C和Java等结构化程序设计语言，并且能用C语言的缩进格式来处理程序的缩进结构
"set smartindent 在这种缩进模式中，每一行都和前一行有相同的缩进量，同时这种缩进形式能正确的识别出花括号，当遇到右花括号（}），则取消缩进形式。此外还增加了识别C语言关键字的功能。如果一行是以#开头的，那么这种格式将会被特殊对待而不采用缩进格式
"set autoindent  autoindent 在这种缩进形式中，新增加的行和前一行使用相同的缩进形式

set linebreak  "前面已说过 set wrap 就可以造成屏幕折行，可是却会把一个英文单字折成两半，实在很不雅观。好了，Vim再体贴您一次，:set linebreak(lbr) 就会避免这种问题发生，会在空白或标点符号的地方来折行，但也仍属屏幕折行，并不会插入 EOL
set showmatch  "高亮显示匹配的括号
set matchtime=10  "匹配括号高亮的时间（单位是十分之一秒）
set selection=inclusive  "指定在选择文本时,光标所在位置也属于被选中的范围
set wildmenu     "在命令模式下使用 Tab 自动补全的时候,将补全内容使用一个漂亮的单行菜单形式显示出来
set mousemodel=popup    "当右键单击窗口的时候，弹出快捷菜单 

syntax on          "自动语法高亮
set cursorline     "设置光标所在的行  高亮光标所在行
set cursorcolumn   "设置光标所在的列  高亮光标所在列

"set background=dark
color solarized     "设置背景主题  

autocmd InsertEnter * se cul    " 用浅色高亮当前行 
set ruler           " 显示标尺  
set showcmd          " 输入的命令显示出来，看的清楚些  
set scrolloff=3     " 光标移动到buffer的顶部和底部时保持3行距离 
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}    "状态行显示的内容 
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2) 
set nocompatible    "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 

" 显示中文帮助
if version >= 603
	set encoding=utf-8
endif

set number    " 显示行号
set history=1000   " 历史记录数

"搜索逐字符高亮
set hlsearch
set incsearch

set cmdheight=2   " 总是显示状态行
filetype on       " 侦测文件类型
filetype plugin on   " 载入文件类型插件
filetype indent on   " 为特定文件类型载入相关缩进文件
set viminfo+=!       " 保存全局变量
set iskeyword+=_,$,@,%,#,-   " 带有如下符号的单词不要被换行分割
set autoread         " 设置当文件被改动时自动载入
set completeopt=preview,menu   "代码补全 
set autowrite        "自动保存
set noeb            " 去掉输入错误的提示声音
set confirm         " 在处理未保存或只读文件的时候，弹出确认
set magic           " 显示括号配对情况
set backspace=indent,eol,start   "解决backspace不能删除的问题
set clipboard=unnamedplus     "然后就可以使用y和p来随意复制粘帖（到）其它地方的内容了（再不用“+y按三个键这么麻烦了！！！）
set mouse=a        "全模式使用鼠标
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1    "解决乱码

"C，C++ 按F5编译运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -std=c++11 -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java' 
		exec "!javac %" 
		exec "!time java %<"
	elseif &filetype == 'python'
		exec "!time python2.7 %"

	endif
endfunc

"设置括号自动补全
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {<CR>}<ESC>O



